# This workflow runs after a pull-request has been approved by a reviewer.

name: CI Tests

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]


jobs:
  pre-commit:
    # runs on github hosted runner
    runs-on: ubuntu-22.04
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
    - uses: pre-commit/action@v3.0.0

  # ensures we have a change-id in every commit, needed for gerrit
  check-for-change-id:
    # runs on github hosted runner
    runs-on: ubuntu-22.04
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check for Change-Id
        run: |
          # loop through all the commits in the pull request
          for commit in $(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}); do
              git checkout $commit
              if (git log -1 --pretty=format:"%B" | grep -q "Change-Id: ")
              then
                # passes as long as at least one change-id exists in the pull request
                exit 0
              fi
          done
          # if we reach this part, none of the commits had a change-id
          echo "None of the commits in this pull request contains a Change-ID, which we require for any changes made to gem5. "\
            "To automatically insert one, run the following:\n f=`git rev-parse --git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; "\
            "curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f\n Then amend the commit with git commit --amend --no-edit, and update your pull request."
          exit 1

  build-gem5:
    runs-on: [self-hosted, linux, x64, build]
    if: github.event.pull_request.draft == false
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    needs: [pre-commit, check-for-change-id] # only runs if pre-commit and change-id passes
    steps:
      - uses: actions/checkout@v3

      - name: Build gem5
        run: scons build/ALL/gem5.opt -j $(nproc)

      - uses: actions/upload-artifact@v3
        with:
          name: gem5-all-opt-ci-tests-run-${{ github.run_number }}-attempt-${{ github.run_attempt }}
          path: build/ALL/gem5.opt

  unittests-all-opt:
    runs-on: [self-hosted, linux, x64, run]
    if: github.event.pull_request.draft == false
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    needs: [pre-commit, check-for-change-id] # only runs if pre-commit and change-id passes
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - name: CI Unittests
        working-directory: ${{ github.workspace }}
        run: scons build/ALL/unittests.opt -j $(nproc)
      - run: echo "This job's status is ${{ job.status }}."

  testlib-get-test-dirs:
    runs-on: [self-hosted, linux, x64, run]
    if: github.event.pull_request.draft == false
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    steps:
      - uses: actions/checkout@v3
      - name: Get directories for testlib-quick-tests
        working-directory: "${{ github.workspace }}/tests"
        id: dirs
        run: |
            {
                echo 'dirs<<EOF'
                find gem5 -type d -maxdepth 1
                echo EOF
            } >> "$GITHUB_ENV"
    outputs:
        test-dirs: ${{ steps.dirs.outputs.dirs }}

  testlib-quick:
    runs-on: [self-hosted, linux, x64, run]
    if: github.event.pull_request.draft == false
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    needs: [testlib-get-test-dirs, pre-commit, build-gem5, check-for-change-id]
    timeout-minutes: 360     # 6 hours
    strategy:
      fail-fast: false
      matrix:
        test-dir: ${{ needs.testlib-get-test-dirs.outputs.test-dirs }}
    steps:
      - name: Clean runner
        run:
          rm -rf ./* || true
          rm -rf ./.??* || true
          rm -rf ~/.cache || true

        # Checkout the repository then download the gem5.opt artifact.
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3

        # Run the testlib quick tests in the given directory.
      - name: Run "tests/${{ matrix.test-dir }}"" TestLib CI Tests
        id: run-tests
        working-directory: ${{ github.workspace }}/tests
        run: ./main.py run --skip-build -vv ${{ matrix.test-dir }}

        # Get the basename of the matrix.test-dir path (to name the artifact).
      - name: Get directory name from path
        id: get-dir
        if: success() || failure()
        run: echo "dirname=$(basename ${{ matrix.test-dir }})" >> $GITHUB_ENV

        # Upload the tests/testing-results directory as an artifact.
      - name: Upload test results
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: "ci-tests-output-${{ steps.get-dir.outputs.dirname }}-run-${{ github.run_number }}-attempt-${{ github.run_attempt }}-status-${{ steps.run-tests.outcome }}"
          path: tests/testing-results
          retention-days: 30
