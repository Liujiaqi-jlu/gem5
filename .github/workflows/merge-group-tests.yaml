# This workflow runs when a pull request enters the merge queue.

name: Merge Group Tests

on:
    merge_group:

jobs:
  build-gem5:
    runs-on: [self-hosted, linux, x64, build]
    if: github.event.pull_request.draft == false
    container: ghcr.io/gem5/ubuntu-22.04_all-dependencies:latest
    needs: [pre-commit, check-for-change-id] # only runs if pre-commit and change-id passes
    outputs:
      artifactname: ${{ steps.name.outputs.test }}
    steps:
      - uses: actions/checkout@v3
      - id: name
        run: echo "test=$(date +"%Y-%m-%d_%H.%M.%S")-artifact" >> $GITHUB_OUTPUT

      - name: Build gem5
        run: |
          scons build/ALL/gem5.opt -j $(nproc)
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.name.outputs.test }}
          path: build/ALL/gem5.opt
      - run: echo "This job's status is ${{ job.status }}."

  unittests-all-opt:
    runs-on: [self-hosted, linux, x64, run]
    if: github.event.pull_request.draft == false
    container: ghcr.io/gem5/ubuntu-22.04_all-dependencies:latest
    needs: [pre-commit, check-for-change-id] # only runs if pre-commit and change-id passes
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - name: CI Unittests
        working-directory: ${{ github.workspace }}
        run: scons build/ALL/unittests.opt -j $(nproc)
      - run: echo "This job's status is ${{ job.status }}."

  testlib-quick:
    runs-on: [self-hosted, linux, x64, run]
    if: github.event.pull_request.draft == false
    container: ghcr.io/gem5/ubuntu-22.04_all-dependencies:latest
    needs: [pre-commit, build-gem5, check-for-change-id]
    timeout-minutes: 360     # 6 hours
    steps:
      - name: Clean runner
        run:
          rm -rf ./* || true
          rm -rf ./.??* || true
          rm -rf ~/.cache || true
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{needs.build-gem5.outputs.artifactname}}
          path: build/ALL
      - run: chmod u+x build/ALL/gem5.opt
      - name: The TestLib CI Tests
        working-directory: ${{ github.workspace }}/tests
        run: ./main.py run --skip-build -vv
      - name: create zip of results
        if: success() || failure()
        run: |
          apt-get -y install zip
          zip -r output.zip tests/testing-results
      - name: upload zip
        if: success() || failure()
        uses: actions/upload-artifact@v3
        env:
          MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
        with:
          name: ${{ env.MY_STEP_VAR }}
          path: output.zip
          retention-days: 7
      - run: echo "This job's status is ${{ job.status }}."

  all-tests-pass:
  # runs on github hosted runner
    runs-on: ubuntu-latest
    needs: [unittests-all-opt, testlib-quick]
    # forces tests to always run
    if: ${{ always() }}
    steps:
    # first check if previous steps failed, exit with error code if so
    - name: failing tests, reject from queue
      if: ${{ always() && (needs.unittests-all-opt.result == 'failure' || needs.testlib-quick.result == 'failure' || needs.unittests-all-opt.result == 'skipped' || needs.testlib-quick.result == 'skipped') }}
      run: |
        echo "this does not pass the tests"
        exit 1
    # only reaches this point and passes if both jobs pass
    - name: passing tests
      if: ${{ needs.unittests-all-opt.result == 'success' && needs.testlib-quick.result == 'success' }}
      run: echo "actually passed"
