# This workflow runs all of the long tests within main.py, extra tests in nightly.sh, and unittests

name: Daily Tests

on:
  # Runs every day from 7AM UTC
  schedule:
    - cron:  '0 7 * * *'

jobs:

  # this builds both unittests.fast and unittests.debug
  unittests-fast-debug:
    strategy:
      matrix:
        type: [fast, debug]
    runs-on: [self-hosted, linux, x64, run]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          # Scheduled workflows run on the default branch by default. We
          # therefore need to explicitly checkout the develop branch.
          ref: develop
      - name: ALL/unittests.${{ matrix.type }} UnitTests
        run: scons build/ALL/unittests.${{ matrix.type }} -j $(nproc)

  testlib-long-matrix:
    runs-on: [self-hosted, linux, x64, run]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Scheduled workflows run on the default branch by default. We
          # therefore need to explicitly checkout the develop branch.
          ref: develop

        # Unfortunately the 'ubunutu-latest' image doesn't have jq installed.
        # We therefore need to install it as a step here.
      - name: Install jq
        run: apt install -y jq

      - name: Get directories for testlib-quick
        working-directory: "${{ github.workspace }}/tests"
        id: suite-id-matrix
        run: echo "suite-id-matrix=$(./main.py list --length=long --suites -q | jq -ncR '[inputs]')" >>$GITHUB_OUTPUT

      - name: Get the build targets for testlib-quick-gem5-builds
        working-directory: "${{ github.workspace }}/tests"
        id: build-matrix
        run: echo "build-matrix=$(./main.py list --build-targets --length=long -q | jq -ncR '[inputs]')" >>$GITHUB_OUTPUT

    outputs:
        build-matrix: ${{ steps.build-matrix.outputs.build-matrix }}
        suite-id-matrix: ${{ steps.suite-id-matrix.outputs.suite-id-matrix }}

  testlib-long-build:
    needs: [testlib-long-matrix]
    strategy:
        matrix:
          build: ${{ fromJson(needs.testlib-long-matrix.outputs.build-matrix) }}
    runs-on: [self-hosted, linux, x64, build]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    steps:
      - uses: actions/checkout@v3
        with:
            # Scheduled workflows run on the default branch by default. We
            # therefore need to explicitly checkout the develop branch.
            ref: develop

      - name: Build gem5
        run: scons ${{ matrix.build }} -j $(nproc)

        # This hashing hack is required as the upload-artifact action is strict
        # in what it allows in the name field. The build info is written to a
        # file then `hashFiles` is used to hash the file as the artifact name.
        # This same trick is then used to retrieve the artifact in the
        # testlib-long job.
      - run: echo ${{ matrix.build }} >build.txt
      - uses: actions/upload-artifact@v3
        with:
            name: "daily-test-${{ github.run_number }}-attempt-${{ github.run_attempt }}-testlib-long-gem5-build-${{ hashFiles('build.txt') }}"
            path: build/**/gem5.*
            retention-days: 5

        # Here we create an artifact containing all the gem5-builds for this
        # run of the workload. This may be useful for debugging.
      - uses: actions/upload-artifact@v3
        with:
            name: "daily-test-${{ github.run_number }}-attempt-${{ github.run_attempt }}-all-gem5-builds"
            path: build/**/gem5.*
            retention-days: 5

  testlib-long:
    runs-on: [self-hosted, linux, x64, run]
    needs: [testlib-long-build, testlib-long-matrix]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    timeout-minutes: 1440 # 24 hours for entire matrix to run
    strategy:
      fail-fast: false
      matrix:
        suite-id: ${{ fromJson(needs.testlib-long-matrix.outputs.suite-id-matrix) }}
    steps:
        - name: Clean runner
          run:
            rm -rf ./* || true
            rm -rf ./.??* || true
            rm -rf ~/.cache || true

        - uses: actions/checkout@v3
          with:
            # Scheduled workflows run on the default branch by default. We
            # therefore need to explicitly checkout the develop branch.
            ref: develop

          # Here we download the gem5 binaries from the build job. We use the
          # Same hashing trick as in the build job to get the artifact.
        - run: echo $(./main.py list --length=long --build-target -q --uid ${{ matrix.suite-id }}) >build.txt
        - name: Download gem5 binaries
          uses: actions/download-artifact@v2
          with:
            name: "daily-test-${{ github.run_number }}-attempt-${{ github.run_attempt }}-testlib-long-gem5-build-${{ hashFiles('build.txt') }}"

          # GitHub's artifact action does not pereserve file permissions.
          # Therefore, we need to make the gem5 binaries executable.
        - name: Chmod gem5.{opt,debug,fast} to be executable
          run:
            find . -name "gem5.opt" -exec chmod u+x {} \;
            find . -name "gem5.debug" -exec chmod u+x {} \;
            find . -name "gem5.fast" -exec chmod u+x {} \;

          # Run the suite of tests.
        - name: Run ${{matrix.suite-id}}
          id: run-suite
          working-directory: ${{ github.workspace }}/tests
          run: ./main.py run --uid="${{ matrix.suite-id }}" --skip-build -vv

          # Upload the tests/testing-results directory as an artifact.
        - name: Upload tests/testing-results
          if: success() || failure()
          uses: actions/upload-artifact@v3
          with:
            name: "daily-test-${{ github.run_number }}-attempt-${{ github.run_attempt }}-testlib-long-suite-${{ matrix.suite-id }}-status-${{ steps.run-suite.outcome }}-output"
            path: "tests/testing-results/${{ matrix.suite-id }}"
            retention-days: 30

  # This runs the SST-gem5 integration compilation and tests it with
  # ext/sst/sst/example.py.
  sst-test:
    runs-on: [self-hosted, linux, x64, build]
    container: gcr.io/gem5-test/sst-env:latest
    timeout-minutes: 180

    steps:
    - uses: actions/checkout@v3
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop
    - name: Build RISCV/libgem5_opt.so with SST
      run: scons build/RISCV/libgem5_opt.so --without-tcmalloc --duplicate-sources --ignore-style -j $(nproc)
    - name: Compile ext/sst
      working-directory: ${{ github.workspace }}/ext/sst
      run: make -j $(nproc)
    - name: Run SST test
      working-directory: ${{ github.workspace }}/ext/sst
      run: sst --add-lib-path=./ sst/example.py

  # This runs the gem5 within SystemC ingration and runs a simple hello-world
  # simulation with it.
  systemc-test:
    runs-on: [self-hosted, linux, x64, build]
    container: gcr.io/gem5-test/systemc-env:latest
    timeout-minutes: 180

    steps:
    - uses: actions/checkout@v3
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop
    - name: Build ARM/gem5.opt
      run: scons build/ARM/gem5.opt --ignore-style --duplicate-sources -j$(nproc)
    - name: Build ARM/libgem5_opt.so
      run: scons build/ARM/libgem5_opt.so --with-cxx-config --without-python --without-tcmalloc USE_SYSTEMC=0 -j$(nproc) --duplicate-sources
    - name: Compile gem5 withing SystemC
      working-directory: ${{ github.workspace }}/util/systemc/gem5_within_systemc
      run: make
    - name: Run gem5 within SystemC test
      run: ./build/ARM/gem5.opt configs/deprecated/example/se.py -c tests/test-progs/hello/bin/arm/linux/hello
    - name: Continue gem5 within SystemC test
      run: LD_LIBRARY_PATH=build/ARM/:/opt/systemc/lib-linux64/ ./util/systemc/gem5_within_systemc/gem5.opt.sc m5out/config.ini

  # Runs the gem5 Nighyly GPU tests.
  gpu-tests:
    runs-on: [self-hosted, linux, x64, build]
    container: gcr.io/gem5-test/gcn-gpu:latest
    timeout-minutes: 720 # 12 hours

    steps:
    - uses: actions/checkout@v3
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop
    - name: Compile build/GCN3_X86/gem5.opt
      run: scons build/GCN3_X86/gem5.opt -j $(nproc)
    - name: Get Square test-prog from gem5-resources
      uses: wei/wget@v1
      with:
        args: -q http://dist.gem5.org/dist/develop/test-progs/square/square # Removed -N bc it wasn't available within actions, should be okay bc workspace is clean every time: https://github.com/coder/sshcode/issues/102
    - name: Run Square test with GCN3_X86/gem5.opt (SE mode)
      run: |
        mkdir -p tests/testing-results
        ./build/GCN3_X86/gem5.opt configs/example/apu_se.py --reg-alloc-policy=dynamic -n3 -c square
    - name: Get allSyncPrims-1kernel from gem5-resources
      uses: wei/wget@v1
      with:
        args: -q http://dist.gem5.org/dist/develop/test-progs/heterosync/gcn3/allSyncPrims-1kernel # Removed -N bc it wasn't available within actions, should be okay bc workspace is clean every time
    - name: Run allSyncPrims-1kernel sleepMutex test with GCN3_X86/gem5.opt (SE mode)
      run: ./build/GCN3_X86/gem5.opt configs/example/apu_se.py --reg-alloc-policy=dynamic -n3 -c allSyncPrims-1kernel --options="sleepMutex 10 16 4"
    - name: Run allSyncPrims-1kernel lfTreeBarrUsing test with GCN3_X86/gem5.opt (SE mode)
      run: ./build/GCN3_X86/gem5.opt configs/example/apu_se.py --reg-alloc-policy=dynamic -n3 -c allSyncPrims-1kernel --options="lfTreeBarrUniq 10 16 4"
