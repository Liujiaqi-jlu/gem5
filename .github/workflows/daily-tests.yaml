# This workflow runs all of the Daily tests tests.

name: Daily Tests

on:
  # Runs every day from 7AM UTC.
  schedule:
  - cron: 0 7 * * *
  # Allows us to manually start workflow for testing.
  workflow_dispatch:

jobs:
  name-artifacts:
    # This job creates a unique name for the artifacts that are uploaded
    runs-on: ubuntu-latest
    steps:
    - id: artifact-name
      run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")" >> $GITHUB_OUTPUT

    outputs:
      build-name: ${{ steps.artifact-name.outputs.name }}

  build-gem5:
    strategy:
      fail-fast: false
      matrix:
        # Note: NULL is in quotes since it is considered a keyword in yaml
        # files.
        image:
        - ALL
        - ALL_CHI
        - ARM
        - ALL_MSI
        - ALL_MESI_Two_Level
        - 'NULL'
        - NULL_MI_example
        - RISCV
        - VEGA_X86

        # The following allows us to pass additional command line parameters
        # the default is to add -j $(nproc), but some images
        # require more specifications when built
        include:
        - setconfig-option: ''
        - isa-option: ''
        - image: ALL_CHI
          setconfig-option: RUBY_PROTOCOL_CHI=y
          isa-option: ALL
        - image: ALL_MSI
          setconfig-option: RUBY_PROTOCOL_MSI=y
          isa-option: ALL
        - image: ALL_MESI_Two_Level
          setconfig-option: RUBY_PROTOCOL_MESI_TWO_LEVEL=y
          isa-option: ALL
        - image: NULL_MI_example
          setconfig-option: RUBY_PROTOCOL_MI_EXAMPLE=y
          isa-option: 'NULL'
    runs-on: [self-hosted, linux, x64]
    needs: name-artifacts
    container: ghcr.io/gem5/ubuntu-24.04_all-dependencies:latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop

      # Setup the gem5 configuraiton using the kconfig system.
    - name: Defconfig gem5
      if: ${{ matrix.setconfig-option  != '' }}
      run: |
        scons defconfig build/${{ matrix.image }} \
          build_opts/${{ matrix.isa-option }}
    - name: Setconfig gem5
      if: ${{ matrix.setconfig-option  != '' }}
      run: |
        scons setconfig build/${{ matrix.image }} \
          ${{ matrix.setconfig-option }}

      # Build the gem5 binary.
    - name: Build gem5
      run: scons build/${{ matrix.image }}/gem5.opt -j $(nproc)

      # Upload the gem5 binary as an artifact.
    - uses: actions/upload-artifact@v4
      with:
        name: |
          ${{ needs.name-artifacts.outputs.build-name }}-${{ matrix.image }}
        path: '*build/${{ matrix.image }}/gem5.opt'

  unittests-fast-debug:
    # This job builds both unittests.fast and unittests.debug unittests.
    strategy:
      matrix:
        type:
        - fast
        - debug
    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/ubuntu-24.04_all-dependencies:latest
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop
    - name: ALL/unittests.${{ matrix.type }} UnitTests
      run: scons build/ALL/unittests.${{ matrix.type }} -j $(nproc)

  testlib-long-tests:
    # This job runs all the testlib long tests
    strategy:
      fail-fast: false
      matrix:
        test-type: ${{ fromJson("$(find tests/gem5/* -type d -maxdepth 0 | jq -ncR
          '[inputs]')") }}


    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/ubuntu-24.04_all-dependencies:latest
    needs: name-artifacts
    timeout-minutes: 1440     # 24 hours for entire matrix to run
    steps:
    - uses: actions/checkout@v4
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop

      # download all artifacts for each test. Thoguh this is inelegant,
      # it's simpler than figuring otu which long tests requires which
      # binary.
    - name: Download all gem5 binaries
      uses: actions/download-artifact@4
      with:
        pattern: ${{needs.name-artifacts.outputs.build-name}}*
        merge-multiple: true

      # The upload/download GitHub actions do not preserve the executable
      # bit of the files. We need to set the executable bit for the
      # gem5.opt binaries we've just downloaded.
    - run: |
        find build -name "gem5.opt" | xargs -r chmod u+x
        find build -name "gem5.fast" | xargs -r chmod u+x
        find build -name "gem5.debug" | xargs -r chmod u+x

      # Run the tests based on the subdirectory.
    - name: Long ${{ matrix.test-type }} tests
      working-directory: ${{ github.workspace }}/tests
      run: |
        ./main.py run gem5/${{ matrix.test-type }} --length=long \
          --skip-build -vv -t $(nproc)

    - name: Upload Results
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: |
          ${{ matrix.test-type }}_commit-${{github.sha}}\
          _run-${{github.run_id}}_attempt-${{github.run_attempt}}
        path: tests/testing-results

  sst-test:
    # This runs the SST-gem5 integration compilation and tests it with
    # ext/sst/sst/example.py.
    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/sst-env:latest
    timeout-minutes: 180 # 3 hours

    steps:
    - uses: actions/checkout@v4
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop

    - name: Build RISCV/libgem5_opt.so with SST
      run: |
        scons build/RISCV/libgem5_opt.so --without-tcmalloc \
        --duplicate-sources --ignore-style -j $(nproc)

    - name: Makefile ext/sst
      working-directory: ${{ github.workspace }}/ext/sst
      run: mv Makefile.linux Makefile

    - name: Compile ext/sst
      working-directory: ${{ github.workspace }}/ext/sst
      run: make -j $(nproc)

    - name: Run SST test
      working-directory: ${{ github.workspace }}/ext/sst
      run: sst --add-lib-path=./ sst/example.py

  systemc-test:
    # This runs the gem5 within SystemC ingration and runs a simple hello-world
    # simulation with it.
    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/systemc-env:latest
    timeout-minutes: 180 # 3 hours

    steps:
    - uses: actions/checkout@v4
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop

    - name: Build ARM/gem5.opt
      run: |
        scons build/ARM/gem5.opt --ignore-style --duplicate-sources -j$(nproc)

    - name: Disable systemc
      run: |
        scons setconfig build/ARM --ignore-style USE_SYSTEMC=n

    - name: Build ARM/libgem5_opt.so
      run: |
        scons build/ARM/libgem5_opt.so --with-cxx-config --without-python \
        --without-tcmalloc -j$(nproc) --duplicate-sources

    - name: Compile gem5 withing SystemC
      working-directory: |
        ${{ github.workspace }}/util/systemc/gem5_within_systemc
      run: make

    - name: Run gem5 within SystemC test
      run: |
        ./build/ARM/gem5.opt configs/deprecated/example/se.py \
        -c tests/test-progs/hello/bin/arm/linux/hello

    - name: Continue gem5 within SystemC test
      run: |
        LD_LIBRARY_PATH=build/ARM/:/opt/systemc/lib-linux64/ \
        ./util/systemc/gem5_within_systemc/gem5.opt.sc m5out/config.ini

  gpu-tests:
    # This job runs the GPU tests.
    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/gcn-gpu:latest
    timeout-minutes: 720  # 12 hours

    steps:
    - uses: actions/checkout@v4
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop

    - name: Compile build/VEGA_X86/gem5.opt
      run: scons build/VEGA_X86/gem5.opt -j $(nproc)

    - name: Get allSyncPrims-1kernel from gem5-resources
      run: |
        build/VEGA_X86/gem5.opt util/obtain-resource.py \
        allSyncPrims-1kernel -p allSyncPrims-1kernel

    - name: |
        Run allSyncPrims-1kernel sleepMutex test with VEGA_X86/gem5.opt \
        (SE mode)
      run: |
        ./build/VEGA_X86/gem5.opt configs/example/apu_se.py \
        --reg-alloc-policy=dynamic -n3 -c allSyncPrims-1kernel \
        --options="sleepMutex 10 16 4"

    - name: |
        Run allSyncPrims-1kernel lfTreeBarrUsing test with VEGA_X86/gem5.opt \
        (SE mode)
      run: |
        ./build/VEGA_X86/gem5.opt configs/example/apu_se.py \
        --reg-alloc-policy=dynamic -n3 -c allSyncPrims-1kernel \
        --options="lfTreeBarrUniq 10 16 4"


  daily-tests:
    # The dummy job is used to indicate whether the daily tests have
    # passed or not. This can be used as status check for pull requests.
    # I.e., if we want to stop pull requests from being merged if the
    # daily tests are failing we can add this job as a required status
    # check.
    runs-on: ubuntu-latest
    needs:
    - unittests-fast-debug
    - testlib-long-tests
    - sst-test
    - systemc-test
    - gpu-tests

    steps:
    - run: echo "The Daily tests have passed."
